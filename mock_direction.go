// Code generated by MockGen. DO NOT EDIT.
// Source: Direction.go

// Package marsrover is a generated GoMock package.
package marsrover

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDirection is a mock of Direction interface
type MockDirection struct {
	ctrl     *gomock.Controller
	recorder *MockDirectionMockRecorder
}

// MockDirectionMockRecorder is the mock recorder for MockDirection
type MockDirectionMockRecorder struct {
	mock *MockDirection
}

// NewMockDirection creates a new mock instance
func NewMockDirection(ctrl *gomock.Controller) *MockDirection {
	mock := &MockDirection{ctrl: ctrl}
	mock.recorder = &MockDirectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDirection) EXPECT() *MockDirectionMockRecorder {
	return m.recorder
}

// right mocks base method
func (m *MockDirection) right() Direction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "right")
	ret0, _ := ret[0].(Direction)
	return ret0
}

// right indicates an expected call of right
func (mr *MockDirectionMockRecorder) right() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "right", reflect.TypeOf((*MockDirection)(nil).right))
}

// left mocks base method
func (m *MockDirection) left() Direction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "left")
	ret0, _ := ret[0].(Direction)
	return ret0
}

// left indicates an expected call of left
func (mr *MockDirectionMockRecorder) left() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "left", reflect.TypeOf((*MockDirection)(nil).left))
}

// stepSizeForX mocks base method
func (m *MockDirection) stepSizeForX() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "stepSizeForX")
	ret0, _ := ret[0].(int)
	return ret0
}

// stepSizeForX indicates an expected call of stepSizeForX
func (mr *MockDirectionMockRecorder) stepSizeForX() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "stepSizeForX", reflect.TypeOf((*MockDirection)(nil).stepSizeForX))
}

// stepSizeForY mocks base method
func (m *MockDirection) stepSizeForY() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "stepSizeForY")
	ret0, _ := ret[0].(int)
	return ret0
}

// stepSizeForY indicates an expected call of stepSizeForY
func (mr *MockDirectionMockRecorder) stepSizeForY() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "stepSizeForY", reflect.TypeOf((*MockDirection)(nil).stepSizeForY))
}

// toString mocks base method
func (m *MockDirection) toString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "toString")
	ret0, _ := ret[0].(string)
	return ret0
}

// toString indicates an expected call of toString
func (mr *MockDirectionMockRecorder) toString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "toString", reflect.TypeOf((*MockDirection)(nil).toString))
}
